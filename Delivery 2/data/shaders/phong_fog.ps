varying vec3 v_position;
varying vec3 v_world_position;
varying vec3 v_normal;
varying vec2 v_uv;

uniform vec4 u_color;
uniform vec3 light_pos;
uniform vec3 camera_pos;
uniform sampler2D u_texture;

// Fog parameters
unform vec3 u_player_position;
uniform int hash_lookup_table[257]; 

float get_noise(int x, int y) {
	int pseudo = hash_lookup_table[ (hash_lookup_table[x & 255] + y) & 255] & 0b1111;
	int gradient = pseudo & 0b111;
	gradient += 1;

	if (pseudo & 0b1000 != 0) {
		return gradient * -1;
	} else {
		return gradient;
	}
}

void main()
{
	vec3 fog_color = vec3(1.0, 1.0, 1.0);
	vec3 dir = normalize(camera_pos - v_position);
	vec3 reflect_dir = reflect(-light_pos, v_normal);
	vec3 light_dir = normalize(light_pos - v_position);

	// White light
	//vec3 specular_light = vec3(1,1,1) * 0.5 * pow(clamp(dot(dir, reflect_dir), 0., 255.), 32.0); // Is
	vec3 diffuse = vec3(1,1,1) * max(dot(v_normal, light_dir), 0.0);
	vec3 ambient = vec3(0.2, 0.2, 0.2);

	vec3 result = (diffuse + ambient) * texture2D( u_texture, v_uv ).xyz;

	// Add fog
	float cam_pix_dist = length(v_world_position - camera_pos) * get_noise(v_world_position.x, v_world_position.z);
	cam_pix_dist = clamp(cam_pix_dist / 220.0, 0.0, 1.0);

	result = mix(fog_color, result, 1.0 - cam_pix_dist);
	gl_FragColor = vec4( result, 1.0 ) ;
}